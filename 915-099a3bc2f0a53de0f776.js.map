{"version":3,"file":"915-099a3bc2f0a53de0f776.js","mappings":"kNAqB2BA,SAEXC,EAAAA,EAedC,EACAC,GAAAA,IAdEC,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,SACAC,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,IACAC,EAAAA,EAAAA,aAAAA,EAAAA,EACAC,SAAAA,OAAAA,IAAAA,EAAW,GAAAC,EACXC,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,gBAAAA,EAAAA,EACAC,UAAAA,OAAAA,IAAAA,EAAAA,QAAAA,EACGC,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,QAAAA,UAAAA,YAAAA,WAAAA,iBAAAA,MAAAA,eAAAA,WAAAA,iBAAAA,kBAAAA,cAMHC,EAMEb,EANFa,MACAC,EAKEd,EALFc,OACAC,EAIEf,EAJFe,OACAC,EAGEhB,EAHFgB,OACAC,EAEEjB,EAFFiB,YACiBC,EACflB,EADFU,gBAGF,IAAKZ,EAAKqB,QACR,OAAO,KAGT,IAAMC,EAAatB,EAAKqB,QAAQE,cAAAA,2BAEhC,IAAIC,EAAAA,EAAAA,MAA8BF,IAAerB,EAASoB,QACxD,OAAO,KAGT,IAAMI,EAAWC,KAAKC,UAAUT,GAC1BU,GAAYC,EAAAA,EAAAA,GAAeJ,GAEjChB,GAAAA,EAAAA,EAAAA,GAAAA,CACEI,UAAAA,EACAF,eAAAA,EACAC,gBAAAA,GACGH,GAGL,IAAMqB,EACJC,EAAAA,cAACC,EAAAA,EAAAA,CAAcf,OAAQA,EAAQF,MAAOA,EAAOC,OAAQA,IACjDY,GACAG,EAAAA,cAACE,EAAAA,EAAAA,OAAAA,OAAAA,IACKC,EAAAA,EAAAA,GACFf,EACAd,EACAY,EACAF,EACAC,EACAI,KAINW,EAAAA,cAACI,EAAAA,EAAAA,OAAAA,OAAAA,GACMrB,EAAAA,CACLC,MAAOA,EACPC,OAAQA,EACRoB,UAAW5B,IACP6B,EAAAA,EAAAA,GACFjC,EACAwB,GAAavB,EACba,EACAf,EACAG,EACAmB,EACAlB,EACAE,MAWR,OAJiBR,EAASoB,QAAoBiB,EAAAA,OAASC,EAAAA,SAC9CT,EAAW9B,EAAKqB,SACzBpB,EAASoB,SAAAA,EAAU,WAGbrB,EAAKqB,UACPiB,EAAAA,EAAAA,QAAQ,KAAkCtC,EAAKqB","sources":["webpack://gatsby-starter-blog/../src/components/lazy-hydrate.tsx"],"sourcesContent":["import React, { MutableRefObject } from \"react\"\nimport { hydrate, render } from \"react-dom\"\nimport { GatsbyImageProps } from \"./gatsby-image.browser\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImageProps, MainImage } from \"./main-image\"\nimport {\n  getMainProps,\n  getPlaceholderProps,\n  hasNativeLazyLoadSupport,\n  hasImageLoaded,\n} from \"./hooks\"\nimport { ReactElement } from \"react\"\n\ntype LazyHydrateProps = Omit<GatsbyImageProps, \"as\" | \"style\" | \"className\"> & {\n  isLoading: boolean\n  isLoaded: boolean // alwaystype SetStateAction<S> = S | ((prevState: S) => S);\n  toggleIsLoaded: (toggle: boolean) => void\n  ref: MutableRefObject<HTMLImageElement | undefined>\n}\n\nconst IS_DEV = process.env.NODE_ENV === `development`\n\nexport function lazyHydrate(\n  {\n    image,\n    loading,\n    isLoading,\n    isLoaded,\n    toggleIsLoaded,\n    ref,\n    imgClassName,\n    imgStyle = {},\n    objectPosition,\n    backgroundColor,\n    objectFit = `cover`,\n    ...props\n  }: LazyHydrateProps,\n  root: MutableRefObject<HTMLElement | undefined>,\n  hydrated: MutableRefObject<boolean>\n): (() => void) | null {\n  const {\n    width,\n    height,\n    layout,\n    images,\n    placeholder,\n    backgroundColor: wrapperBackgroundColor,\n  } = image\n\n  if (!root.current) {\n    return null\n  }\n\n  const hasSSRHtml = root.current.querySelector(`[data-gatsby-image-ssr]`)\n  // On first server hydration do nothing\n  if (hasNativeLazyLoadSupport() && hasSSRHtml && !hydrated.current) {\n    return null\n  }\n\n  const cacheKey = JSON.stringify(images)\n  const hasLoaded = hasImageLoaded(cacheKey)\n\n  imgStyle = {\n    objectFit,\n    objectPosition,\n    backgroundColor,\n    ...imgStyle,\n  }\n\n  const component = (\n    <LayoutWrapper layout={layout} width={width} height={height}>\n      {!hasLoaded && (\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            isLoaded,\n            layout,\n            width,\n            height,\n            wrapperBackgroundColor\n          )}\n        />\n      )}\n      <MainImage\n        {...(props as Omit<MainImageProps, \"images\" | \"fallback\">)}\n        width={width}\n        height={height}\n        className={imgClassName}\n        {...getMainProps(\n          isLoading,\n          hasLoaded || isLoaded,\n          images,\n          loading,\n          toggleIsLoaded,\n          cacheKey,\n          ref,\n          imgStyle\n        )}\n      />\n    </LayoutWrapper>\n  )\n\n  // Force render to mitigate \"Expected server HTML to contain a matching\" in develop\n  const doRender = hydrated.current || IS_DEV ? render : hydrate\n  doRender(component, root.current)\n  hydrated.current = true\n\n  return (): void => {\n    if (root.current) {\n      render((null as unknown) as ReactElement, root.current)\n    }\n  }\n}\n"],"names":["NODE_ENV","lazyHydrate","root","hydrated","image","loading","isLoading","isLoaded","toggleIsLoaded","ref","imgClassName","imgStyle","N","objectPosition","backgroundColor","objectFit","props","width","height","layout","images","placeholder","wrapperBackgroundColor","current","hasSSRHtml","querySelector","hasNativeLazyLoadSupport","cacheKey","JSON","stringify","hasLoaded","hasImageLoaded","component","React","LayoutWrapper","Placeholder","getPlaceholderProps","MainImage","className","getMainProps","render","hydrate"],"sourceRoot":""}